<?php namespace Api;

use Carbon\Carbon;
use Helpers\TimeCounter;
use Models\Session\Session;
use Services\User\UserService;

/**
 * Class UserController
 * @package Api;
 */
class UserController extends BaseController
{
    /**
     * @var UserService $service
     */
    protected $service;

    public function initialize()
    {
        $this->service = new UserService();
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function getUserAction($slug)
    {
        if ($user = $this->service->getUserBySlug($slug)) {

            $data = $this->buildResponse($user);

            return $this->response(200, 'OK', $data);
        }

        return $this->response(404, 'OK', ['message' => 'User not found']);
    }

    private function buildResponse($user)
    {
        $birthDay = Carbon::createFromFormat('Y-m-d', $user->birthday);
        $age = Carbon::now()->diffInYears($birthDay);

        $averageDuration = 0;
        $averageEffective = 0;
        $averageTotal = 0;

        $durationKey = 'duration';
        $effectiveKey = 'effective';

        if ($user->Sessions->count()) {

            $timeCounter = new TimeCounter();

            foreach ($user->Sessions as $session) {

                if ($session->duration !== null) {
                    $timeCounter->addTime($durationKey, $session->duration);
                    $averageTotal++;
                }

                if ($session->effective !== null) {
                    $timeCounter->addTime($effectiveKey, $session->effective);
                }
            }

            $timeCounter->calculate($durationKey);
            $timeCounter->calculate($effectiveKey);

            $averageDuration = gmdate('H:i:s', $timeCounter->get_total_time($durationKey) / $averageTotal);
            $averageEffective = gmdate('H:i:s', $timeCounter->get_total_time($effectiveKey) / $averageTotal);
        }

        $activeSession = Session::find([
            'user_id = :user_id: AND completed = 0',
            'bind' => [
                'user_id' => $user->id
            ]
        ])->getLast();

        return [
            'slug' => $user->slug,
            'user' => [
                'firstName' => $user->firstName,
                'lastName' => $user->lastName,
                'age' => $age,
                'birthday' => $user->birthday,
            ],
            'gym' => [
                'name' => $user->Gym->name,
                'location' => $user->Gym->location,
            ],
            'sessions' => [
                'averages' => [
                    'session_time' => $averageDuration,
                    'effective_time' => $averageEffective
                ],
                'active' => ($activeSession && $activeSession->EffectiveTimes) ? $activeSession->EffectiveTimes->toArray() : false,
                'total' => $user->Sessions->count(),
                'items' => $user->Sessions->toArray()
            ]
        ];
    }
}
