<?php namespace Api;

use Carbon\Carbon;
use Models\Session\Session;
use Models\Session\SessionEffectiveTime;
use Services\User\UserService;

/**
 * Class SessionController
 * @package Api;
 */
class SessionController extends BaseController
{
    /**
     * @var UserService $userService
     */
    protected $userService;

    public function initialize()
    {
        $this->userService = new UserService();
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function newSessionForUserAction($userSlug)
    {
        if ($user = $this->userService->getUserBySlug($userSlug)) {

            $lastSession = $user->Sessions->getLast();
            $date = Carbon::now();

            $hourDifference = false;

            if ($lastSession) {
                $lastSessionDate = Carbon::parse($lastSession->timestamp);
                $hourDifference = $lastSessionDate->diffInHours($date);
            }

            if ($hourDifference > 3 || !$lastSession) {

                if ($lastSession) {
                    $lastSession->completed = 1;
                    $lastSession->update();
                }

                $session = new Session();
                $session->user_id = $user->id;
                $session->save();

                return $this->response(200, 'OK', ['message' => 'Session for ' . $date . ' created']);
            }

            return $this->response(200, 'OK', ['message' => 'Session for ' . $lastSession->timestamp . ' used']);
        }

        return $this->response(404, 'OK', ['message' => 'User not found']);
    }

    public function startGymEffectiveSessionAction($userSlug)
    {
        if ($user = $this->userService->getUserBySlug($userSlug)) {

            $lastSession = $user->Sessions->getLast();

            $SessionEffectiveTime = new SessionEffectiveTime();
            $SessionEffectiveTime->user_id = $user->id;
            $SessionEffectiveTime->session_id = $lastSession->id;

            $SessionEffectiveTime->save();

            return $this->response(200, 'OK', ['message' => 'Active session created: ' . $SessionEffectiveTime->timestamp_start . '']);
        }
    }

    public function stopGymEffectiveSessionAction($userSlug)
    {
        if ($user = $this->userService->getUserBySlug($userSlug)) {

            $lastEffectiveTime = $user->EffectiveTimes->getLast();

            if ($lastEffectiveTime && $lastEffectiveTime->timestamp_stop == '') {
                $lastEffectiveTime->timestamp_stop = Carbon::now()->format('Y-m-d H:i:s');
                $lastEffectiveTime->save();

                return $this->response(200, 'OK', ['message' => 'Last active session stopped at: ' . $lastEffectiveTime->timestamp_stop . '']);
            }

            return $this->response(200, 'OK', ['message' => 'Last active session was not found or already updated']);
        }
    }
}
